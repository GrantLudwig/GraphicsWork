#include <glad.h>
#include <glfw/glfw3.h>
#include <stdio.h>
#include "GLXtras.h"
#include "Camera.h"

// GPU identifiers
GLuint vBuffer = 0;
GLuint program = 0;

bool shift = false;

int winWidth = 1920, winHeight = 1080;
Camera camera(winWidth / 2, winHeight, vec3(0, 0, 0), vec3(0, 0, -1), 30);

float cubeSize = .05f;
float cubeStretch = cubeSize;

vec3 points[] = {
	vec3(0.0, -0.21259842519685043, -0.3972798854688619), 						// 1
	vec3(0.0, -0.06943450250536869, -0.329277022190408), 						// 2
	vec3(0.0, 0.09520400858983537, -0.2576950608446671), 						// 3
	vec3(0.0, 0.23120973514674292, -0.2576950608446671), 						// 4
	vec3(0.0, 0.3886900501073728, -0.2648532569792413), 						// 5
	vec3(0.0, 0.5748031496062992, -0.18611309949892638), 						// 6
	vec3(0.0, 0.6821760916249104, -0.07158196134574087), 						// 7
	vec3(0.1503221188260558, 0.6750178954903363, -0.05368647100930565), 		// 8
	vec3(0.329277022190408, 0.5819613457408733, 0.028632784538296246), 			// 9
	vec3(0.4366499642090193, 0.4531138153185397, 0.16463851109520392), 			// 10
	vec3(0.11095204008589828, 0.6034359341445954, -0.15748031496063), 			// 11
	vec3(0.2362204724409448, 0.5819613457408733, -0.12884753042233363), 		// 12
	vec3(0.3829634931997136, 0.46743020758768783, -0.05726556907659275), 		// 13
	vec3(0.13600572655690754, 0.4316392269148174, -0.23622047244094493), 		// 14
	vec3(0.2576950608446671, 0.44595561918396553, -0.19327129563350043), 		// 15
	vec3(0.085898353614889, 0.2813171080887615, -0.27201145311381536), 			// 16
	vec3(0.20042949176807437, 0.32426628489620607, -0.2505368647100932), 		// 17
	vec3(0.3221188260558338, 0.32426628489620607, -0.21116678596993566), 		// 18
	vec3(0.4115962777380099, 0.30994989262705797, -0.09305654974946319), 		// 19
	vec3(0.4581245526127413, 0.27057981388690044, 0.11811023622047233), 		// 20
	vec3(0.10021474588403712, 0.2097351467430206, -0.22906227630637085), 		// 21
	vec3(0.17251252684323565, 0.18110236220472437, -0.20042949176807448), 		// 22
	vec3(0.2397995705082319, 0.18110236220472437, -0.18611309949892638), 		// 23
	vec3(0.329277022190408, 0.18468146027201146, -0.18611309949892638), 		// 24
	vec3(0.40085898353614885, 0.13815318539727986, -0.08947745168217609), 		// 25
	vec3(0.4652827487473155, 0.1524695776664281, 0.0), 							// 26
	vec3(0.4366499642090193, 0.066571224051539, -0.01431639226914825), 			// 27
	vec3(0.085898353614889, 0.09520400858983537, -0.18611309949892638), 		// 28
	vec3(0.11453113815318537, 0.030780243378668554, -0.17895490336435219), 		// 29
	vec3(0.22906227630637085, -0.008589835361488976, -0.13600572655690768), 	// 30
	vec3(0.22190408017179666, -0.06227630637079463, -0.16105941302791696), 		// 31
	vec3(0.35075161059413, -0.026485325697924195, -0.1109520400858984), 		// 32
	vec3(0.4366499642090193, -0.10522548317823913, -0.09305654974946319), 		// 33
	vec3(0.43307086614173246, 0.0629921259842519, -0.03579098067287043), 		// 34
	vec3(0.3579098067287042, -0.1302791696492484, -0.15032211882605592), 		// 35
	vec3(0.2648532569792413, -0.22691481746599856, -0.20758768790264856), 		// 36
	vec3(0.1503221188260558, -0.1338582677165355, -0.22906227630637085), 		// 37
	vec3(0.1503221188260558, -0.21259842519685043, -0.329277022190408), 		// 38
	vec3(0.36864710093056524, -0.2376521116678597, -0.15032211882605592), 		// 39
	vec3(0.4223335719398709, -0.37007874015748027, -0.03221188260558347), 		// 40
	vec3(0.41517537580529723, -0.20544022906227638, -0.09305654974946319), 		// 41
	vec3(0.18253400143163914, -0.27702219040801723, -0.22190408017179666), 		// 42
	vec3(0.4473872584108803, -0.21617752326413753, 0.0071581961345740614), 		// 43
	vec3(0.30780243378668565, -0.3915533285612026, -0.20758768790264856), 		// 44
	vec3(0.0, -0.30207587687902654, -0.3829634931997136), 						// 45
	vec3(0.0, -0.345025053686471, -0.29348604151753754), 						// 46
	vec3(0.0, -0.420186113099499, -0.3078024337866858), 						// 47
	vec3(0.3256979241231209, -0.5490336435218325, -0.15032211882605592), 		// 48
	vec3(0.24695776664280608, -0.5418754473872585, -0.20400858983536146), 		// 49
	vec3(0.0, -0.5776664280601288, -0.2899069434502506), 						// 50
	vec3(0.0, -0.6420901932712957, -0.2648532569792413), 						// 51
	vec3(0.0, -0.8210450966356478, -0.29348604151753754), 						// 52
	vec3(0.0, -0.8747315676449535, -0.27201145311381536), 						// 53
	vec3(0.3149606299212596, -0.6814602720114531, -0.1073729420186113), 		// 54
	vec3(0.24337866857551874, -0.7029348604151754, -0.23622047244094493), 		// 55
	vec3(0.25411596277738, -0.4774516821760917, -0.20042949176807448), 			// 56
	vec3(0.4795991410164639, 0.15962777380100204, 0.085898353614889), 			// 57
	vec3(0.4795991410164639, 0.1524695776664281, 0.22906227630637085), 			// 58
	vec3(0.4795991410164639, -0.06943450250536869, 0.2362204724409448), 		// 59
	vec3(0.4581245526127413, -0.1982820329277023, 0.0429491768074445), 			// 60
	vec3(0.3256979241231209, -0.5705082319255548, -0.010737294201861156), 		// 61
	vec3(0.3256979241231209, -0.6599856836077309, 0.0393700787401574), 			// 62
	vec3(0.36148890479599133, -0.4846098783106657, 0.1288475304223335), 		// 63
	vec3(0.3722261989978526, -0.6241947029348605, 0.16463851109520392), 		// 64
	vec3(0.397279885468862, -0.506084466714388, 0.27201145311381525), 			// 65
	vec3(0.20042949176807437, 0.2526843235504652, -0.2612741589119542), 		// 66
	vec3(0.3221188260558338, 0.2598425196850394, -0.22190408017179666), 		// 67
	vec3(0.40801717967072304, 0.24910522548317812, -0.1145311381531855), 		// 68
	vec3(0.40085898353614885, 0.19541875447387247, -0.12168933428775955), 		// 69
	vec3(0.4939155332856118, -0.05511811023622057, 0.085898353614889), 			// 70
	vec3(-0.1503221188260558, 0.6750178954903363, -0.05368647100930565), 		// 71	 8
	vec3(-0.329277022190408, 0.5819613457408733, 0.028632784538296246), 		// 72	 9
	vec3(-0.4366499642090193, 0.4531138153185397, 0.16463851109520392), 		// 73	 10
	vec3(-0.11095204008589828, 0.6034359341445954, -0.15748031496063), 			// 74	 11
	vec3(-0.2362204724409448, 0.5819613457408733, -0.12884753042233363),		// 75	 12
	vec3(-0.3829634931997136, 0.46743020758768783, -0.05726556907659275), 		// 76	 13
	vec3(-0.13600572655690754, 0.4316392269148174, -0.23622047244094493), 		// 77	 14
	vec3(-0.2576950608446671, 0.44595561918396553, -0.19327129563350043), 		// 78	 15
	vec3(-0.085898353614889, 0.2813171080887615, -0.27201145311381536), 		// 79	 16
	vec3(-0.20042949176807437, 0.32426628489620607, -0.2505368647100932),		// 80	 17
	vec3(-0.3221188260558338, 0.32426628489620607, -0.21116678596993566), 		// 81	 18
	vec3(-0.4115962777380099, 0.30994989262705797, -0.09305654974946319),		// 82	 19
	vec3(-0.4581245526127413, 0.27057981388690044, 0.11811023622047233), 		// 83	 20
	vec3(-0.10021474588403712, 0.2097351467430206, -0.22906227630637085), 		// 84	 21
	vec3(-0.17251252684323565, 0.18110236220472437, -0.20042949176807448),		// 85	 22
	vec3(-0.2397995705082319, 0.18110236220472437, -0.18611309949892638), 		// 86	 23
	vec3(-0.329277022190408, 0.18468146027201146, -0.18611309949892638), 		// 87	 24
	vec3(-0.40085898353614885, 0.13815318539727986, -0.08947745168217609), 		// 88	 25
	vec3(-0.4652827487473155, 0.1524695776664281, 0.0), 						// 89	 26
	vec3(-0.4366499642090193, 0.066571224051539, -0.01431639226914825), 		// 90	 27
	vec3(-0.085898353614889, 0.09520400858983537, -0.18611309949892638), 		// 91	 28
	vec3(-0.11453113815318537, 0.030780243378668554, -0.17895490336435219),		// 92	 29
	vec3(-0.22906227630637085, -0.008589835361488976, -0.13600572655690768),	// 93	 30
	vec3(-0.22190408017179666, -0.06227630637079463, -0.16105941302791696), 	// 94	 31
	vec3(-0.35075161059413, -0.026485325697924195, -0.1109520400858984), 		// 95	 32
	vec3(-0.4366499642090193, -0.10522548317823913, -0.09305654974946319), 		// 96	 33
	vec3(-0.43307086614173246, 0.0629921259842519, -0.03579098067287043), 		// 97	 34
	vec3(-0.3579098067287042, -0.1302791696492484, -0.15032211882605592), 		// 98	 35
	vec3(-0.2648532569792413, -0.22691481746599856, -0.20758768790264856), 		// 99	 36
	vec3(-0.1503221188260558, -0.1338582677165355, -0.22906227630637085), 		// 100	 37
	vec3(-0.1503221188260558, -0.21259842519685043, -0.329277022190408), 		// 101	 38
	vec3(-0.36864710093056524, -0.2376521116678597, -0.15032211882605592), 		// 102	 39
	vec3(-0.4223335719398709, -0.37007874015748027, -0.03221188260558347), 		// 103	 40
	vec3(-0.41517537580529723, -0.20544022906227638, -0.09305654974946319), 	// 104	 41
	vec3(-0.18253400143163914, -0.27702219040801723, -0.22190408017179666), 	// 105	 42
	vec3(-0.4473872584108803, -0.21617752326413753, 0.0071581961345740614), 	// 106	 43
	vec3(-0.30780243378668565, -0.3915533285612026, -0.20758768790264856), 		// 107	 44
	vec3(-0.3256979241231209, -0.5490336435218325, -0.15032211882605592), 		// 108	 48
	vec3(-0.24695776664280608, -0.5418754473872585, -0.20400858983536146), 		// 109	 49
	vec3(-0.3149606299212596, -0.6814602720114531, -0.1073729420186113), 		// 110	 54
	vec3(-0.24337866857551874, -0.7029348604151754, -0.23622047244094493), 		// 111	 55
	vec3(-0.25411596277738, -0.4774516821760917, -0.20042949176807448), 		// 112	 56
	vec3(-0.4795991410164639, 0.15962777380100204, 0.085898353614889), 			// 113	 57
	vec3(-0.4795991410164639, 0.1524695776664281, 0.22906227630637085), 		// 114	 58
	vec3(-0.4795991410164639, -0.06943450250536869, 0.2362204724409448), 		// 115	 59
	vec3(-0.4581245526127413, -0.1982820329277023, 0.0429491768074445), 		// 116	 60
	vec3(-0.3256979241231209, -0.5705082319255548, -0.010737294201861156), 		// 117	 61
	vec3(-0.3256979241231209, -0.6599856836077309, 0.0393700787401574), 		// 118	 62
	vec3(-0.36148890479599133, -0.4846098783106657, 0.1288475304223335), 		// 119	 63
	vec3(-0.3722261989978526, -0.6241947029348605, 0.16463851109520392), 		// 120	 64
	vec3(-0.397279885468862, -0.506084466714388, 0.27201145311381525), 			// 121	 65
	vec3(-0.20042949176807437, 0.2526843235504652, -0.2612741589119542), 		// 122	 66
	vec3(-0.3221188260558338, 0.2598425196850394, -0.22190408017179666), 		// 123	 67
	vec3(-0.40801717967072304, 0.24910522548317812, -0.1145311381531855), 		// 124	 68
	vec3(-0.40085898353614885, 0.19541875447387247, -0.12168933428775955), 		// 125	 69
	vec3(-0.4939155332856118, -0.05511811023622057, 0.085898353614889), 		// 126	 70
};

int triangles[][3] = {
	{6, 5, 10},
	{6, 73, 5},
	{6, 10, 7},
	{6, 70, 73},
	{7, 11, 8},
	{70, 71, 74},
	{7, 10, 11},
	{70, 74, 73},
	{5, 13, 10},
	{5, 73, 76},
	{10, 13, 14},
	{73, 77, 76},
	{10, 14, 11},
	{73, 74, 77},
	{11, 12, 8},
	{74, 72, 75},
	{11, 14, 12},
	{74, 75, 77},
	{8, 12, 9},
	{71, 72, 75},
	{5, 4, 13},
	{5, 76, 4},
	{4, 3, 15},
	{4, 78, 3},
	{4, 15, 13},
	{4, 76, 78},
	{13, 15, 16},
	{76, 79, 78},
	{13, 16, 14},
	{76, 77, 79},
	{14, 16, 17},
	{77, 80, 79},
	{14, 17, 18},
	{77, 81, 80},
	{14, 18, 12},
	{77, 75, 81},
	{12, 18, 19},
	{75, 82, 81},
	{12, 19, 9},
	{75, 72, 82},
	{15, 3, 20},
	{78, 83, 3},
	{15, 65, 16},
	{78, 79, 121},
	{16, 65, 66},
	{79, 122, 121},
	{16, 66, 17},
	{79, 80, 122},
	{17, 66, 67},
	{80, 123, 122},
	{17, 67, 18},
	{80, 81, 123},
	{18, 67, 25},
	{81, 88, 123},
	{15, 20, 65},
	{78, 121, 83},
	{65, 20, 21},
	{121, 84, 83},
	{65, 21, 22},
	{121, 85, 84},
	{65, 22, 66},
	{121, 122, 85},
	{66, 22, 23},
	{122, 86, 85},
	{66, 23, 67},
	{122, 123, 86},
	{67, 23, 68},
	{123, 124, 86},
	{67, 68, 25},
	{123, 88, 124},
	{68, 23, 24},
	{124, 87, 86},
	{68, 24, 25},
	{124, 88, 87},
	{3, 2, 20},
	{3, 83, 2},
	{20, 2, 27},
	{83, 90, 2},
	{20, 27, 21},
	{83, 84, 90},
	{24, 26, 25},
	{87, 88, 89},
	{27, 2, 28},
	{90, 91, 2},
	{2, 36, 28},
	{2, 91, 99},
	{28, 30, 29},
	{91, 92, 93},
	{29, 30, 34},
	{92, 97, 93},
	{29, 34, 31},
	{92, 94, 97},
	{31, 34, 33},
	{94, 96, 97},
	{31, 32, 33},
	{94, 96, 95},
	{2, 1, 36},
	{2, 99, 1},
	{28, 36, 30},
	{91, 93, 99},
	{30, 36, 35},
	{93, 98, 99},
	{30, 35, 34},
	{93, 97, 98},
	{34, 40, 32},
	{97, 95, 103},
	{1, 37, 36},
	{1, 99, 100},
	{36, 37, 35},
	{99, 98, 100},
	{1, 0, 37},
	{1, 100, 0},
	{34, 35, 38},
	{97, 101, 98},
	{34, 38, 40},
	{97, 103, 101},
	{35, 41, 43},
	{98, 106, 104},
	{35, 43, 38},
	{98, 101, 106},
	{40, 38, 39},
	{103, 102, 101},
	{38, 43, 39},
	{101, 102, 106},
	{0, 44, 37},
	{0, 100, 44},
	{45, 43, 41},
	{45, 104, 106},
	{45, 46, 55},
	{45, 111, 46},
	{45, 55, 43},
	{45, 106, 111},
	{43, 55, 47},
	{106, 111, 107},
	{43, 47, 39},
	{106, 102, 107},
	{55, 48, 47},
	{111, 107, 108},
	{49, 50, 48},
	{49, 108, 50},
	{50, 48, 54},
	{50, 108, 110},
	{50, 51, 54},
	{50, 110, 51},
	{51, 52, 54},
	{51, 110, 52},
	{54, 52, 53},
	{110, 109, 52},
	{48, 54, 47},
	{108, 107, 110},
	{47, 54, 53},
	{107, 109, 110},
	{9, 19, 57},
	{72, 113, 82},
	{18, 56, 19},
	{81, 82, 112},
	{18, 25, 56},
	{81, 112, 88},
	{19, 56, 57},
	{82, 113, 112},
	{25, 69, 56},
	{88, 112, 125},
	{56, 69, 57},
	{112, 113, 125},
	{25, 26, 69},
	{88, 125, 89},
	{26, 33, 69},
	{89, 125, 96},
	{33, 32, 69},
	{96, 125, 95},
	{32, 40, 42},
	{95, 105, 103},
	{32, 42, 59},
	{95, 115, 105},
	{32, 59, 69},
	{95, 125, 115},
	{57, 69, 58},
	{113, 114, 125},
	{69, 59, 58},
	{125, 114, 115},
	{47, 53, 60},
	{107, 116, 109},
	{39, 47, 60},
	{102, 116, 107},
	{40, 39, 42},
	{103, 105, 102},
	{42, 39, 59},
	{105, 115, 102},
	{58, 59, 64},
	{114, 120, 115},
	{59, 39, 62},
	{115, 118, 102},
	{59, 62, 64},
	{115, 120, 118},
	{39, 60, 62},
	{102, 118, 115},
	{60, 53, 61},
	{116, 117, 109},
	{62, 60, 61},
	{118, 117, 116},
	{62, 61, 63},
	{118, 119, 117},
	{62, 63, 64},
	{118, 120, 119}
};

const int npoints = (sizeof(points) / sizeof(int)) / 3;
const int ntriangles = (sizeof(triangles) / sizeof(int)) / 3;
vec3 normals[npoints];
//int test[npoints];

const char *vertexShader = "\
	#version 130											\n\
	in vec3 point;											\n\
	in vec3 normal;											\n\
	out vec3 vPoint;										\n\
	out vec3 vNormal;										\n\
	uniform mat4 modelView;									\n\
	uniform mat4 persp;										\n\
	void main() {											\n\
		vPoint = (modelView * vec4(point, 1)).xyz;			\n\
		vNormal = (modelView * vec4(vPoint, 1)).xyz;		\n\
		gl_Position = persp * vec4(vPoint, 1);				\n\
		//gl_PointSize = 10.0;								\n\
	}";

const char *pixelShader = "\
	#version 130								\n\
	in vec3 vPoint;								\n\
	in vec3 vNormal;							\n\
	out vec4 pColor;							\n\
	uniform float a = .2;						\n\
	uniform vec3 lightPos = vec3(1,0,0);		\n\
	uniform vec3 color = vec3(1, 1, 1);			\n\
	void main() {								\n\
		vec3 N = normalize(vNormal);			\n\
		vec3 L = normalize(lightPos - vPoint);	\n\
		float d = abs(dot(N, L));				\n\
		vec3 R = reflect(L, N);					\n\
		vec3 E = normalize(vPoint);				\n\
		float h = max(0, dot(R, E));			\n\
		float s = pow(h, 100);					\n\
		float intensity = clamp(a+d+s, 0, 1);	\n\
        pColor = vec4(intensity * color, 1);	\n\
	}";

void Display(GLFWwindow *window) {
	glClear(GL_DEPTH_BUFFER_BIT);
	glEnable(GL_DEPTH_TEST);
	// clear background
    glClearColor(.5,.5,.5,1);
    glClear(GL_COLOR_BUFFER_BIT);
	// access GPU vertex buffer
    glUseProgram(program);
    glBindBuffer(GL_ARRAY_BUFFER, vBuffer);
	VertexAttribPointer(program, "point", 3, 0, (void *) 0);
	VertexAttribPointer(program, "normal", 3, 0, (void *) sizeof(points));

	SetUniform(program, "modelView", camera.modelview);
	SetUniform(program, "persp", camera.persp);

	glDrawElements(GL_TRIANGLES, sizeof(triangles) / sizeof(int), GL_UNSIGNED_INT, triangles);
	//glDrawElements(GL_POINTS, sizeof(test), GL_UNSIGNED_INT, test);
	//glEnable(GL_PROGRAM_POINT_SIZE);
		 
    glFlush();
}

void InitNormals() {
	//zero array
	for (int i = 0; i < npoints; i++) {
		normals[i] = vec3(0, 0, 0);
		//test[i] = i;
	}

	//compute normal for each triangle 
	for (int i = 0; i < ntriangles; i++) {
		int *t = triangles[i];
		vec3 p1(points[t[0]]);
		vec3 p2(points[t[1]]);
		vec3 p3(points[t[2]]);
		vec3 n = normalize(cross(p3 - p2, p2 - p1));
		for (int k = 0; k < 3; k++) {
			normals[t[k]] += n;
		}
		//set vertex normals to unit length
	}

	for (int i = 0; i < npoints; i++) {
		normals[i] = normalize(normals[i]);
	}
}

void InitVertexBuffer() {
    // make GPU buffer for points & colors, set it active buffer
    glGenBuffers(1, &vBuffer);
    glBindBuffer(GL_ARRAY_BUFFER, vBuffer);
	// allocate memory for vertex positions and normals
	int sizePts = sizeof(points), sizeNms = sizeof(normals);
	glBufferData(GL_ARRAY_BUFFER, sizePts + sizeNms, NULL, GL_STATIC_DRAW);
	// copy data
	glBufferSubData(GL_ARRAY_BUFFER, 0, sizePts, &points[0]);
	glBufferSubData(GL_ARRAY_BUFFER, sizePts, sizeNms, &normals[0]);
}

bool InitShader() {
	program = LinkProgramViaCode(&vertexShader, &pixelShader);
	if (!program)
		printf("can't init shader program\n");
	return program != 0;
}

// application

void Keyboard(GLFWwindow *window, int key, int scancode, int action, int mods) {
	shift = mods & GLFW_MOD_SHIFT; // shift is global bool
    if (action == GLFW_PRESS)
		switch (key) {
			case GLFW_KEY_ESCAPE:
				glfwSetWindowShouldClose(window, GLFW_TRUE);
				break;
			case 'S': // stretches the cube
				cubeStretch *= shift ? .9f : 1.1f;
				cubeStretch = cubeStretch < .02f ? .02f : cubeStretch;
				break;
		}
		
}

void MouseButton(GLFWwindow *w, int butn, int action, int mods) {
	if (action == GLFW_PRESS) {
		double x, y;
		glfwGetCursorPos(w, &x, &y);
		camera.MouseDown((int) x, (int) y);
	}
	if (action == GLFW_RELEASE) {
		camera.MouseUp();
	}
}

void MouseMove(GLFWwindow *w, double x, double y) {
	if (glfwGetMouseButton(w, GLFW_MOUSE_BUTTON_LEFT) == GLFW_PRESS) {
		camera.MouseDrag((int)x, (int)y, shift);
	}
}

void MouseWheel(GLFWwindow *w, double xoffset, double direction) {
	camera.MouseWheel((int) direction, shift);
}

void ErrorGFLW(int id, const char *reason) {
    printf("GFLW error %i: %s\n", id, reason);
}

void Close() {
	// unbind vertex buffer and free GPU memory
	glBindBuffer(GL_ARRAY_BUFFER, 0);
	glDeleteBuffers(1, &vBuffer);
}

int main() {
    glfwSetErrorCallback(ErrorGFLW);
    if (!glfwInit())
        return 1;
    GLFWwindow *w = glfwCreateWindow(winWidth, winHeight, "Camera Cube", NULL, NULL);
    if (!w) {
        glfwTerminate();
        return 1;
    }
    glfwMakeContextCurrent(w);
    gladLoadGLLoader((GLADloadproc) glfwGetProcAddress);
    printf("GL version: %s\n", glGetString(GL_VERSION));
    PrintGLErrors();
	if (!InitShader())
        return 0;
	InitNormals();
    InitVertexBuffer();
    glfwSetKeyCallback(w, Keyboard);
	glfwSetMouseButtonCallback(w, MouseButton);
	glfwSetCursorPosCallback(w, MouseMove);
	glfwSetScrollCallback(w, MouseWheel);
	while (!glfwWindowShouldClose(w)) {
		Display(w);
		glfwSwapBuffers(w);
		glfwPollEvents();
	}
 	Close();
	glfwDestroyWindow(w);
    glfwTerminate();
}
